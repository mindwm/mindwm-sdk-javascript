/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClipboardContext from './ClipboardContext';
import Vector2int from './Vector2int';

/**
 * The Clipboard model module.
 * @module model/Clipboard
 * @version 0.1.0
 */
class Clipboard {
    /**
     * Constructs a new <code>Clipboard</code>.
     * @alias module:model/Clipboard
     * @extends Object
     * @param context {module:model/ClipboardContext} 
     * @param clipboardType {module:model/Clipboard.ClipboardTypeEnum} Type of clipboard
     * @param content {String} Clipboard content
     */
    constructor(context, clipboardType, content) { 
        
        Clipboard.initialize(this, context, clipboardType, content);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, context, clipboardType, content) { 
        obj['context'] = context;
        obj['clipboardType'] = clipboardType;
        obj['content'] = content;
    }

    /**
     * Constructs a <code>Clipboard</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Clipboard} obj Optional instance to populate.
     * @return {module:model/Clipboard} The populated <code>Clipboard</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Clipboard();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('context')) {
                obj['context'] = ClipboardContext.constructFromObject(data['context']);
            }
            if (data.hasOwnProperty('clipboardType')) {
                obj['clipboardType'] = ApiClient.convertToType(data['clipboardType'], 'String');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('selectionStart')) {
                obj['selectionStart'] = Vector2int.constructFromObject(data['selectionStart']);
            }
            if (data.hasOwnProperty('selectionEnd')) {
                obj['selectionEnd'] = Vector2int.constructFromObject(data['selectionEnd']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Clipboard</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Clipboard</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Clipboard.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `context`
        if (data['context']) { // data not null
          ClipboardContext.validateJSON(data['context']);
        }
        // ensure the json data is a string
        if (data['clipboardType'] && !(typeof data['clipboardType'] === 'string' || data['clipboardType'] instanceof String)) {
            throw new Error("Expected the field `clipboardType` to be a primitive type in the JSON string but got " + data['clipboardType']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // validate the optional field `selectionStart`
        if (data['selectionStart']) { // data not null
          Vector2int.validateJSON(data['selectionStart']);
        }
        // validate the optional field `selectionEnd`
        if (data['selectionEnd']) { // data not null
          Vector2int.validateJSON(data['selectionEnd']);
        }

        return true;
    }


}

Clipboard.RequiredProperties = ["context", "clipboardType", "content"];

/**
 * @member {module:model/ClipboardContext} context
 */
Clipboard.prototype['context'] = undefined;

/**
 * Type of clipboard
 * @member {module:model/Clipboard.ClipboardTypeEnum} clipboardType
 */
Clipboard.prototype['clipboardType'] = undefined;

/**
 * Clipboard content
 * @member {String} content
 */
Clipboard.prototype['content'] = undefined;

/**
 * @member {module:model/Vector2int} selectionStart
 */
Clipboard.prototype['selectionStart'] = undefined;

/**
 * @member {module:model/Vector2int} selectionEnd
 */
Clipboard.prototype['selectionEnd'] = undefined;





/**
 * Allowed values for the <code>clipboardType</code> property.
 * @enum {String}
 * @readonly
 */
Clipboard['ClipboardTypeEnum'] = {

    /**
     * value: "Primary"
     * @const
     */
    "Primary": "Primary",

    /**
     * value: "Secondary"
     * @const
     */
    "Secondary": "Secondary",

    /**
     * value: "Clipboard"
     * @const
     */
    "Clipboard": "Clipboard"
};



export default Clipboard;

